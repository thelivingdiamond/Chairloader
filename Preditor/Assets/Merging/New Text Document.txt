#include "Merging/MergeCache.h"

Assets::MergeCache::MergeCache()
{
}

Assets::MergeCache::~MergeCache()
{
}

void Assets::MergeCache::LoadXml(const fs::path& xmlPath)
{
    pugi::xml_document doc;
    pugi::xml_parse_result result = doc.load_file(xmlPath.c_str());

    if (!result)
        throw std::runtime_error(result.description());

    // Files
    for (pugi::xml_node fileNode : doc.first_child().child("Files").children("OutFile"))
    {
        std::string path = fileNode.attribute("path").as_string();
        OutFile file;
        file.merger = fileNode.attribute("marger").as_string();

        for (pugi::xml_node sourceFileNode : fileNode.children("SourceFile"))
        {
            SourceFile sourceFile;
            sourceFile.source = sourceFileNode.attribute("source").as_string();
            sourceFile.modTime = FileModTime(sourceFileNode.attribute("modTime").as_llong());
            sourceFile.metaModTime = FileModTime(sourceFileNode.attribute("metaModTime").as_llong());
            file.sourceFiles.push_back(std::move(sourceFile));
        }

        bool isInseted = files.emplace(path, std::move(file)).second;

        if (!isInseted)
            throw std::runtime_error(fmt::format("Duplicate path: {}", path));
    }
}

void Assets::MergeCache::SaveXml(const fs::path& xmlPath)
{
    pugi::xml_document doc;
    pugi::xml_node root = doc.append_child("MergeCache");

    pugi::xml_node filesNode = root.append_child("Files");
}
